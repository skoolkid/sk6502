; Copyright 2021 Richard Dymond (rjdymond@gmail.com)

[Config]
Expand=#INCLUDE(Expand)
RefFiles=as.ref;bugs.ref;changelog.ref;facts.ref;glossary.ref;lessons.ref;pokes.ref

[Game]
Address=${address:04X}
AddressAnchor={address:04X}
Game=Skool Daze
Length=${size:02X}
Logo=#UDGARRAY8,$14;$5920-$59D8-8({ImagePath}/logo)
StyleSheet=skoolkit.css;theme.css
LinkInternalOperands=1
LinkOperands=BCC,BCS,BEQ,BMI,BNE,BPL,BVC,BVS,JMP,JSR,.WORD
Release=The complete Skool Daze C64 disassembly 20210325
Created=Created using <a href="https://skoolkit.ca">SkoolKit</a> #VERSION and <a href="https://github.com/skoolkid/sk6502">sk6502</a>.
Copyright=&#169; 1985 Microsphere Computer Services Ltd. &#169; 2021 Richard Dymond.

[EntryGroups]
BlackboardBuffer=$19,$1A,$DF
CharacterBuffer=$26,$29,$39,$3B,$3D,$3F,$A6,$A8,$A9,$AA,$AC,$AE,$B0,$B2,$B3,$B4,$B5,$FB,$FF
TemporaryVariables=$07,$12,$15,$1B,$21,$27,$2F,$31,$42,$47,$4D,$5A,$72,$84,$9A,$A2,$C0,$C3,$C7,$CA,$CE,$D3,$D6,$DA,$E3,$E6,$E9,$EC,$F2

[MemoryMap:MemoryMap]
PageByteColumns=0

[MemoryMap:DataMap]
PageByteColumns=0

[MemoryMap:UnusedMap]
PageByteColumns=0

[MemoryMap:CharacterBuffer]
Intro=#INCLUDE(CharacterBufferIntro)
EntryDescriptions=1
Includes=CharacterBuffer
LengthColumn=1

[CharacterBufferIntro]
Whenever a character's state needs to be examined or updated, his character
buffer is copied to the addresses in page 0 shown below by the routine at
#A$3279. Afterwards, the character's buffer is restored from page 0 by the
routine at #A$33BF.

[MemoryMap:BlackboardBuffer]
Intro=#INCLUDE(BlackboardBufferIntro)
EntryDescriptions=1
Includes=BlackboardBuffer
LengthColumn=1

[BlackboardBufferIntro]
Whenever a blackboard's state needs to be examined or updated, its buffer is
copied to the addresses in page 0 shown below by the routine at #A$1421.
Afterwards, the blackboard's buffer is restored from page 0 by the routine at
#A$1445.

[MemoryMap:TemporaryVariables]
Includes=TemporaryVariables
LengthColumn=1

[Index:Graphics:Graphics]
PlayArea
InitialAnimatoryStates
AnimatoryStates

[Index:DataTables:Data tables and buffers]
GameStatusBuffer
CharacterBuffer
BlackboardBuffer
TemporaryVariables
TuneBuffer
MainTimetable
LessonIndex
CommandLists

[Links]
CommandLists=Command lists
MainTimetable=Main timetable

[PageHeaders]
Asm-BlackboardBuffer=Blackboard buffer
Asm-CharacterBuffer=Character buffer
Asm-TemporaryVariables=Temporary variables
GameIndex=The complete<>C64 disassembly

[Titles]
AnimatoryStates=Animatory states
Asm-BlackboardBuffer=Blackboard buffer entry at {entry[address]}
Asm-CharacterBuffer=Character buffer entry at {entry[address]}
Asm-TemporaryVariables=Temporary variables at {entry[address]}
BlackboardBuffer=Blackboard buffer
CharacterBuffer=Character buffer
InitialAnimatoryStates=Initial animatory states and locations
PlayArea=Play area
TemporaryVariables=Temporary variables
TuneBuffer=Tune buffer

[Paths]
AnimatoryStates=graphics/as.html
BlackboardBuffer=buffers/bbuffer.html
CharacterBuffer=buffers/cbuffer.html
CodeFiles={address:04X}.html
InitialAnimatoryStates=graphics/asstart.html
LessonIndex=lessons/index.html
LessonE0=lessons/E0.html
LessonE1=lessons/E1.html
LessonE2=lessons/E2.html
LessonE3=lessons/E3.html
LessonE4=lessons/E4.html
LessonE5=lessons/E5.html
LessonE6=lessons/E6.html
LessonE7=lessons/E7.html
LessonE8=lessons/E8.html
LessonE9=lessons/E9.html
LessonEA=lessons/EA.html
LessonEB=lessons/EB.html
LessonEC=lessons/EC.html
LessonED=lessons/ED.html
LessonEE=lessons/EE.html
LessonEF=lessons/EF.html
LessonF0=lessons/F0.html
LessonF1=lessons/F1.html
LessonF2=lessons/F2.html
LessonF3=lessons/F3.html
LessonF4=lessons/F4.html
LessonF5=lessons/F5.html
LessonF6=lessons/F6.html
LessonF7=lessons/F7.html
LessonF8=lessons/F8.html
LessonF9=lessons/F9.html
LessonFA=lessons/FA.html
LessonFB=lessons/FB.html
LessonFC=lessons/FC.html
LessonFD=lessons/FD.html
LessonFE=lessons/FE.html
LessonFF=lessons/FF.html
PlayArea=graphics/playarea.html
TemporaryVariables=buffers/tvars.html
UDGFilename={addr:04x}

[Page:MainTimetable]
Content=asm/5D00.html

[Page:CommandLists]
Content=asm/4480.html

[Page:TuneBuffer]
Content=asm/BBB4.html

[xBarFrame]
#PUSHS
#POKES0,48;1,32;2,56;3,32;192,1,48,2;193,7,48,2
#FOR(16,88,8)(x,#POKES(x/4,48+x/10);(x/4+1,48+x%10))
#UDGARRAY96;$46F8x96@192-287(*xbar)
#FOR(0,190,2)(i,#WRITE(i,2,i*32,0)(xbar))
#POPS

[Page:PlayArea]
PageContent=#INCLUDE(PlayAreaPage)
xBarFrame=#INCLUDE(xBarFrame)

[PlayAreaPage]
#UDGARRAY*xbar(xbar)
#SKOOLIMG0,0,96,21(skool)
#UDGARRAY*xbar(xbar)

[Page:InitialAnimatoryStates]
PageContent=#INCLUDE(InitialAnimatoryStates)
xBarFrame=#INCLUDE(xBarFrame)

[InitialAnimatoryStates]
#UDGARRAY*xbar(xbar)
#PUSHS
#FOR(0,20)(c,#POKES((c+$78)*256+$60,#PEEK($4900+c)))
#FOR(0,20)(c,#POKES((c+$78)*256+$61,#PEEK($4A00+c)))
#FOR(0,20)(c,#POKES((c+$78)*256+$62,17))
#SDIMG0,0,96,21(initial_as)
#POPS
#UDGARRAY*xbar(xbar)

[Expand]
#DEF(#FACT #LINK:Facts)

#DEF(#ASTADDR(state,tile)
  #PEEK($8D00+$state+256*$tile)+#IF($state&$7F<$48||$state&$7F==$7F)($9900,$A900)
)

#DEF1(#ASUDGARRAY(state)
  #UDGARRAY#(3,$0F,2,512#FOREACH(0,4,8,1,5,9,2,6,10,3,7,11)(t,;(#ASTADDR({state},t))))(as{state:02X})
)

#DEF(#ASIMG(state)
  #PUSHS #POKES($9900,0,2,$1000) #ASUDGARRAY$state #POPS
)

#DEF(#STSPEC(x,y)
  (#PEEK($x+$7800+256*$y)+$6000+$40*($x&$60)),(#PEEK($x+$7880+256*$y))
)

#DEF(#SKOOLIMG(x,y,w,h)
  #UDGARRAY#($w,,2,256#FOR($y,$y+$h-1)(y,#FOR($x,$x+$w-1)(x,;#STSPEC(x,y))))
)

#DEF(#PLACECHAR(cnum,x,y,state)
  #POKES($cnum*256+$60,$state);($cnum*256+$61,$x);($cnum*256+$62,$y)
)

#DEF1(#FCHAR(code)
  #UDG($4700+{code},$0F,,256,flip=2,rotate=1){{width=4*(#PEEK($4700+{code})+2)}}(*c)
  #FOR(0,7)(n,#PLOT(0,n,0)(c)#PLOT(#PEEK($4700+{code})+1,n,0)(c))
  #UDGARRAY*c(char{code:02X})
)

#DEF1(#ASIMGX(state,page,scale)(suffix)
  #PUSHS #POKES$9900,0,2,$1000
  #UDGARRAY#(3,$0F,{scale},512#FOREACH(0,4,8,1,5,9,2,6,10,3,7,11)(t,;(#PEEK($8D00+{state}+256*t)+{page}*256)))(as{state:02X}{page:02X}x{scale}{suffix})
  #POPS
)

#DEF(#SOVER(cnum,x,y,width,height)(bg)
  #LET(a=#PEEK(256*$cnum+$60))
  #LET(x=#PEEK(256*$cnum+$61)-$x)
  #LET(y=#PEEK(256*$cnum+$62)-$y)
  #IF(0<={x}<$width && 0<={y}<$height)(
    #UDGARRAY#(3,$0F,2,512#FOREACH(0,4,8,1,5,9,2,6,10,3,7,11)(t,;(#ASTADDR({a},t)):(#ASTADDR({a},t)+256)))(*sprite)
    #OVER({x},{y})($bg,sprite)
  )
)

#UDGARRAY#(96,,2,256#FOR(0,20)(y,#FOR(0,95)(x,;#STSPEC(x,y))))(*wholeskool)

#DEF(#SDIMG(x,y,w,h)(fname)
  #POKES$9900,0,2,$1000;$9A00,$FF,16,$200
  #COPY($x,$y,$w,$h)(wholeskool,sdimg)
  #FOR($78,$8C)(c,#SOVER(c,$x,$y,$w,$h)(sdimg))
  #UDGARRAY*sdimg($fname)
)

#DEF(#WRITE(addr,length,left,top)(frame)
  #LET(x=$left)
  #FOR($addr,$addr+$length-1)(_a_,#LET(w=#PEEK($4700+#PEEK_a_))#LET(x={x}+1)
    #FOR(1,{w})(_n_,#LET(b=#PEEK($4700+#PEEK_a_+256*_n_))
      #FOR(0,7)(y,#IF({b}&2**(7-y))(#PLOT({x},$top+y)($frame)))#LET(x={x}+1)
    )
  )
)
